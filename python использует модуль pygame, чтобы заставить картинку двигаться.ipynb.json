{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "69dceebc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pygame 2.1.2 (SDL 2.0.18, Python 3.9.12)\n",
      "Hello from the pygame community. https://www.pygame.org/contribute.html\n"
     ]
    },
    {
     "ename": "error",
     "evalue": "video system not initialized",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31merror\u001b[0m                                     Traceback (most recent call last)",
      "Input \u001b[0;32mIn [1]\u001b[0m, in \u001b[0;36m<cell line: 83>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     83\u001b[0m \u001b[38;5;28;01mwhile\u001b[39;00m running:\n\u001b[1;32m     84\u001b[0m     clock\u001b[38;5;241m.\u001b[39mtick(\u001b[38;5;241m30\u001b[39m)\n\u001b[0;32m---> 85\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m event \u001b[38;5;129;01min\u001b[39;00m \u001b[43mpygame\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mevent\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m:\n\u001b[1;32m     86\u001b[0m         \u001b[38;5;28;01mif\u001b[39;00m event\u001b[38;5;241m.\u001b[39mtype \u001b[38;5;241m==\u001b[39m pygame\u001b[38;5;241m.\u001b[39mQUIT:\n\u001b[1;32m     87\u001b[0m             running \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n",
      "\u001b[0;31merror\u001b[0m: video system not initialized"
     ]
    }
   ],
   "source": [
    "import pygame\n",
    "\n",
    "pygame.init()\n",
    "screen = pygame.display.set_mode((640, 320))\n",
    "pygame.display.set_caption(\"Game\")\n",
    "\n",
    "background = pygame.Surface(screen.get_size())\n",
    "background = background.convert()\n",
    "background.fill((255,255,255))\n",
    "\n",
    "clock = pygame.time.Clock()\n",
    "\n",
    "running = True\n",
    "while running:\n",
    "    clock.tick(1)\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT:\n",
    "            running = False\n",
    "    screen.blit(background, (0,0))\n",
    "    pygame.display.update()\n",
    "    \n",
    "pygame.quit()\n",
    "import pygame\n",
    "\n",
    "pygame.init()\n",
    "screen = pygame.display.set_mode((640, 70))\n",
    "pygame.display.set_caption(\"Горизонт\")\n",
    "\n",
    "background = pygame.Surface(screen.get_size())\n",
    "background = background.convert()\n",
    "background.fill((255,255,255))\n",
    "\n",
    "ball = pygame.Surface((30,30))\n",
    "ball.fill((255,255,255))\n",
    "pygame.draw.circle(ball, (0,0,255), (15,15), 15, 0)\n",
    "rect1 = ball.get_rect()\n",
    "rect1.center = (320,45)\n",
    "\n",
    "x, y = rect1.topleft\n",
    "dx = 3\n",
    "clock = pygame.time.Clock()\n",
    "\n",
    "running = True\n",
    "while running:\n",
    "    clock.tick(30)\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT:\n",
    "            running = False\n",
    "    screen.blit(background, (0,0))\n",
    "    x += dx\n",
    "    rect1.center = (x,y)\n",
    "    if(rect1.left <= 0 or rect1.right >= screen.get_width()):\n",
    "        dx *= -1\n",
    "    screen.blit(ball, rect1.topleft)\n",
    "    pygame.display.update()\n",
    "pygame.quit()\n",
    "import pygame, random, math\n",
    "\n",
    "pygame.init()\n",
    "screen = pygame.display.set_mode((400, 300))\n",
    "pygame.display.set_caption(\"Свободное движение\")\n",
    "\n",
    "background = pygame.Surface(screen.get_size())\n",
    "background = background.convert()\n",
    "background.fill((255,255,255))\n",
    "\n",
    "ball = pygame.Surface((30,30))\n",
    "ball.fill((255,255,255))\n",
    "pygame.draw.circle(ball, (0,0,255), (15,15), 15, 0)\n",
    "\n",
    "rect1 = ball.get_rect()\n",
    "rect1.center = (random.randint(100,250),random.randint(150,250))\n",
    "x, y = rect1.topleft\n",
    "\n",
    "direction = random.randint(20,70)\n",
    "radian = math.radians(direction)\n",
    "dx = 5 * math.cos(radian)\n",
    "dy = -5 * math.sin(radian)\n",
    "\n",
    "clock = pygame.time.Clock()\n",
    "\n",
    "running = True\n",
    "while running:\n",
    "    clock.tick(30)\n",
    "    for event in pygame.event.get():\n",
    "        if event.type == pygame.QUIT:\n",
    "            running = False\n",
    "    screen.blit(background, (0,0))\n",
    "    x += dx\n",
    "    y += dy\n",
    "    rect1.center = (x,y)\n",
    "    if(rect1.left <= 0 or rect1.right >= screen.get_width()):\n",
    "        dx *= -1\n",
    "    elif(rect1.top <= 5 or rect1.bottom >= screen.get_height()-5):\n",
    "        dy *= -1\n",
    "    screen.blit(ball, rect1.topleft)\n",
    "    pygame.display.update()\n",
    "    pygame.quit()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91d6aa59",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
